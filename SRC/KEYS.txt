* File: KEYS,  GPL Interpreter Keyscan
*
*           Previous Modification for GPL 1.5H by Beery Miller
*
* 11.30.94  Updated GPL powerup sequence. TT
* 01.26.94  Interrupts turned OFF before powerup invoked
*
* 03.01.94  Modified GPL so pressing <ESCAPE> at Loader menu causes exit to
*   TAT     MDOS.  The old <CTRL><ALT><DEL> is still active, but should no
*           longer be needed.
*
* 03.02.94  After a few mild complaints from Gene Hitz concerning the FIREBUTTON
*   TAT     for the joystick in GPL, I decided to investigate further.  When
*           the firebutton was pressed, it repeated VERY RAPIDLY.  Also, the
*           joystick CRU addresses were reversed (JSTK #1 was #2 and vice-versa)
*
*           1) Swapped CRU addresses
*           2) Wrote a routine to properly set or reset the STATUS BIT @>837C
*              for _both_ joysticks.  Now games or programs requiring single-
*              presses of the firebutton, such as Barrage, will not rapid-
*              fire.  Each button is treated independently.
*
* 5.13.94  Incorporated Jeff White's keyboard fix into the routine
;
; 2.27.21   Problem:
;           QWKESC powerup is gpl mode, only partially preps return to OS
;           There is no real MDOS equivalent except for >2002 in DSRPASS
;           So, do we rely on GPL powerup and reset NUMFIL to 10? Or dig
;           deeper. Removed GPL powerup below and rely on title
;           screen PUPOS call until this can be sorted
;
; 2.28.21   Added numfil reset call to HDR2-P2:PWRUP3 via >4014
;           Removed nonfunctional gpl powerup called while in 9640 mode
;         $ Future,better fix would be to redo DSRPASS-S powerup so that
;           it can be called from gpl/exec without disrupting settings
;
;8.28.2021  Speed 1 wait states were not being turned off before return to OS!
;           Identified by @mizapf
;
       REF  VIDMOD
       DEF  MYAID
       DEF  QWKESC            Quick GPL escape via ESCAPE key at loader screen
       DEF  KEYS0,KEYS1,KEYS2
       DEF  CAPFLG
       DEF  KMODE
       DEF  KEYSDN
       REF  KBRET,KBRET2
       REF  QUITF
       REF  TILOAD
*
KEYCOD EQU  >8375
*
*  CRU DEFINITIONS
*
INTKB  EQU  8            ENABLE KEY BOARD INT TO 9901=1, NOT ENABLE=0
*
*   MEMORY MAPPED I/O
*
MAP04  EQU  >8000        0->1FFF
MAP24  EQU  MAP04+1      >2000->3FFF
*
*   KEYBOARD BUFFER INFORMATION
*
MYAID
KEYINT DATA 0,0,STRKBF,STRKBF,0,0,0,0,0,0,0,0,0,0,0,0
STRKBF TEXT 'WEFOKQWVM,QAERWP98529jc.kjwfpjvm'
       TEXT 'OPO8CVWEN896CQKJNhre189ha89yu12r'
       TEXT 'CMIOWEFJWFEIJWE9Jq3w9rjf3f09jf2q'
       TEXT 'K90KWE8YGNKJSD89Jhgfwlk83894093s'
ENDKBF DATA 0
KEYSDN TEXT '2WEF9OMWEGK90-U89u1324lhk893r23r'
       TEXT 'WE90-UJF2MCW890Y89yweikhasg890y4'
       TEXT 'WE98U4352JF807134hnoisdaf8ysdfa8'
       TEXT 'LMPOM-0UI9VERM90Jreg90uaiojgwoij'
KEYFLG TEXT '2WEF9OMWEGK90-U89u1324lhk893r23r'
       TEXT 'WE90-UJF2MCW890Y89yweikhasg890y4'
       TEXT 'WE98U4352JF807134hnoisdaf8ysdfa8'
       TEXT 'LMPOM-0UI9VERM90Jreg90uaiojgwoij'
CAPFLG EQU  KEYINT+18
*
*
* R0= TEMP
* R1= TEMP
* R2= NEXT PLACE TO PUT A KEYSTROKE
* R3= NEXT PLACE TO GET A KEYSTROKE
* R4= FLAG FOR USE WHEN R2=R3 ZERO MEANS EMPTY BUFFER
* R5= USED FOR KEY TRANSLATION
* R6= LAST_USER_MODE
* R7= LAST_SCAN_CODE USED <HIGH BYTE>
* R8=
* R9=  CAPLOC
* R10= NUMLOC
* R11=
* R12=CRU BASE
* R13=
* R14=
* R15=
*
*
KEYS1  LI   R12,KEYS1#
       B    @KEYTST
KEYS1# MOVB @KEYSDN+>3E,R12  "F4"
       JNE  KEYS1A
       MOVB @KEYSDN+>38,R12  ALT
       JEQ  KEYS1B
       MOVB @KEYSDN+>05,R12  "4"
       JEQ  KEYS1B
*
KEYS1A LI   R12,>2000
       JMP  KEYS1C
KEYS1B CLR  R12
KEYS1C B    @KBRET
*
KEYS0  LI   R12,KEYSC1        CHECK FOR KEYS WHICH DIDN'T INTERRUPT
       B    @KEYTST
*
KEYSC1 LWPI KEYINT
       MOVB @H00,@>837C
*
       CLR  R0
       MOVB @>8374,R0
       JEQ  KE1
*
       CB   R0,@H03
       JL   KMODE1
       MOVB R0,R6
       MOVB @H00,@>8374
*
* KEY MODES 3,4,5
*
* GET SCAN CODE...INTO R1
*
KE1    BL   @GETQ        PARSES SHIFT STATES, SETS KEY DOWN FLAGS
       MOV  R8,R8
       JNE  KILLIT
*
       LI   R5,SCAN1F
       MOVB @KEYFLG+>38,R0    IS ALT ON?
       JNE  TRANS5
*
       LI   R5,SCAN1C
       MOVB @KEYFLG+>1D,R0    IS CTL ON?
       JNE  TRANS5
*
       LI   R5,SCAN1S
       MOVB @KEYFLG+>2A,R0    IS SHIFT1 ON?
       JNE  TRANS5
       MOVB @KEYFLG+>36,R0    IS SHIFT2 ON?
       JNE  TRANS5
*
* HERE, NO SHIFT KEYS DOWN, TEST NUMLOCK...
*
       LI   R5,SCAN1
       MOV  R10,R10      TEST NUMLOCK
       JEQ  TRANS5
*
* NUMLOCK IS DOWN, TRANSLATE NUMERIC.
*
       CI   R1,>46
       JLE  TRANS5       NOT KEYPAD
       CI   R1,>53
       JH   TRANS5       NOT KEYPAD
       MOVB @KEYPAD->47(R1),R1
       SRL  R1,8
*
*
TRANS5 A    R1,R5
       CLR  R1
       MOVB *R5,R1
*
       MOV  R9,R9             TEST CAP LOCK
       JEQ  FILTER
*
       CI   R1,'a'*256
       JLT  FILTER
       CI   R1,'z'*256
       JGT  FILTER
       ANDI R1,>DF00
*
* NOW, TIME TO FILTER FOR MODES 3,4
*
FILTER CB   R6,@H04
       JGT  MODE5
       JEQ  MODE4
*
MODE3  CI   R1,>7E00
       JGT  KILLIT
       CI   R1,>1000
       JLT  MODE5
*
       CI   R1,'a'*256
       JLT  MODE3A
       CI   R1,'z'*256
       JGT  MODE5
*
       ANDI R1,>DF00
*
MODE3A CI   R1,>2000
       JHE  MODE5
       CI   R1,>0D00
       JEQ  MODE5
*
KILLIT LI   R1,>FF00
       JMP  MODE5
*
MODE4  MOV  R1,R0
       ANDI R0,>7F00
       CI   R0,>2000
       JHE  MODE5
       CI   R0,>0D00
       JEQ  MODE5
       AI   R1,>8000
MODE5  MOVB R1,@>8375
*
       LWPI >83E0
       CLR  R12
       CB   @>8375,@HFF           some key pressed?
       JNE  MODE5A                yes, so leave status alone
       MOVB @H00,@>837C           no, clear status bit
MODE5A B    @KBRET
*
********************************************************************************
*
KMODE1 SWPB R6
       MOVB R0,R6
*
ZMODE1 MOV  R4,R4
       JEQ  K1A
       BL   @GETQ
       JMP  ZMODE1       LOOP TO EMPTY QUEUE TO UPDATE STATUS TO CURRENT TIME
*
K1A    LI   R5,KES#1          table for mode 1
       CLR  @MODE2FLAG        assume mode 1
       CI   R6,>0200          was it mode 2?
       JL   K1B               no
       SETO @MODE2FLAG        set flag for mode 2
       LI   R5,KES#2          yes, switch to mode 2 table
*
K1B    SLA  R6,8
       LI   R12,>24
       CLR  @>8376
       LDCR *R5+,1
       TB   -14
       JEQ  JRIGHT
       MOVB @HFC,@>8377
       JMP  J1A
*
JRIGHT TB   -13
       JEQ  J1A
       MOVB @H04,@>8377
*
J1A    TB   -12
       JEQ  JUP
       MOVB @HFC,@>8376
       JMP  J2A
*
JUP    TB   -11
       JEQ  J2A
       MOVB @H04,@>8376
*
J2A    TB   -15               fire button?
       JEQ  NOFIRE            nope

       INC  R5
       MOVB *R5+,R1

*
* Below routine separates the firebuttons, so each is tested separately. Results
* are stored for future use.  Status flag set/reset properly for each scan.
*
       MOVB @H00,@>837C       reset condition bit
       ABS  @MODE2FLAG        key mode 1 or 2  ??
       JEQ  CHECKFIRE1        1
       ABS  @FIREBUT2         was button already pressed?
       JNE  MODE5             yes, just return the key code
       SETO @FIREBUT2         no, set the flag
FIRE0  MOVB @H20,@>837C       return NEW key press
       JMP  MODE5

CHECKFIRE1
       ABS  @FIREBUT1         was button one pressed already?
       JNE  MODE5             yes, just return key code
       SETO @FIREBUT1         no, so set flag for possible next encounter and
       JMP  FIRE0             return
*
* below code modified - will it work?
*
*      MOVB @FIRERP,R1        yes, check for previous condition.  Was it just on
*      JNE  SKIPFR            yes, skip a second fire response
*
*      SETO @FIRERP           no, set the fire flag
*      INC  R5                point to the fire-button code
*      MOVB *R5+,R1           and mode to R1 for return
*      MOVB @H20,@>837C       some games need this 10/8/88
*      JMP  MODE5             return to caller
*
FIRERP DATA 0
MODE2FLAG   DATA 0            3.1.94 TAT
FIREBUT1    DATA 0
FIREBUT2    DATA 0
*
* NOFIRE CLR  @FIRERP

*
* 3.2.94 tAT - Clear correct flag, joysticks now independent
*
NOFIRE ABS  @MODE2FLAG        mode 1 or 2
       JNE  NARF2             2
       CLR  @FIREBUT1         1, so clear the flag
       JMP  SKIPFR            keep going
NARF2  CLR  @FIREBUT2         mode 2, clear fire button 2

SKIPFR MOVB *R5,R1            fire skipped 2nd time through.  At end of list?
       JEQ  KLDONE            yes, go set R1 to >FF and return
*
       SRL  R1,8              no, so adjust the byte
       MOVB @KEYFLG(R1),R1    this key set?
       JNE  KLDONE            yes, go return proper vlaue
*
       INCT R5                no, go look at next word
       JMP  NOFIRE
*
KLDONE INC  R5                get the PROPER return code (or >FF for none)
       MOVB *R5,R1            move to R1 and
       JMP  MODE5             return
*
* KES#1  BYTE 0          CRU ADDRESS REVERSED
KES#1  BYTE 1
       BYTE 16,18             raw code / actual code
       BYTE 71,18
       BYTE 18,5
       BYTE 72,5
       BYTE 31,2
       BYTE 75,2
       BYTE 32,3
       BYTE 77,3
       BYTE 45,0
       BYTE 80,0
*
       BYTE 2,19
       BYTE 3,7
       BYTE 4,8
       BYTE 5,9
       BYTE 6,10
*
       BYTE 17,4
       BYTE 19,6
       BYTE 20,11
*
       BYTE 30,1
       BYTE 33,12
       BYTE 34,17
*
       BYTE 44,15
       BYTE 46,14
       BYTE 47,13
       BYTE 48,16
*
       BYTE 0,>FF
*
*
*
* KES#2  BYTE 1
*
KES#2  BYTE 0
       BYTE 21,18
       BYTE 23,5
       BYTE 36,2
       BYTE 37,3
       BYTE 50,0
*
       BYTE 7,19
       BYTE 8,7
       BYTE 9,8
       BYTE 10,9
       BYTE 11,10
*
       BYTE 22,4
       BYTE 24,6
       BYTE 25,11
       BYTE 26,16
*
       BYTE 35,1
       BYTE 38,12
       BYTE 39,17
*
       BYTE 49,15
       BYTE 51,14
       BYTE 52,13
       BYTE 53,16
*
       BYTE 0,>FF
*
KEYPAD BYTE 8,9,10,74
       BYTE 5,6,7,78
       BYTE 2,3,4,11
       BYTE 52
HD8    BYTE >D8
       EVEN
*
********************************************************************************
*
* RETURN AN INDEX IN R1
*
GETQ   CLR  R8
       MOV  R4,R4        ANY NEW KEYS?
       JEQ  GETQ1        NOPE...TRY OLD SCAN CODE
*
* HERE IF NEW CODE HAS COME IN
*
       MOVB @>83D4,@>8C02
       CLR  @>83D6
       NOP
       MOVB @H81,@>8C02
       MOVB *R3+,R1      GET THE NEW CODE
*
       CI   R3,ENDKBF
       JNE  GETQ2A
       LI   R3,STRKBF
*
GETQ2A C    R2,R3
       JNE  GETQ2B
       CLR  R4           NO MORE KEYS IN BUFFER
*
GETQ2B CLR  R0
       SRA  R1,8
       MOVB R1,R12
       INV  R12
       ANDI R1,>007F
       MOVB R12,@KEYFLG(R1)
       JEQ  GETQ         it was a break code, get next one from queue
*
       CI   R1,>38       ALT KEY?
       JEQ  GETQ
       CI   R1,>1D       CTL KEY?
       JEQ  GETQ
       CI   R1,>2A       SHIFT1 KEY?
       JEQ  GETQ
       CI   R1,>36       SHIFT2 KEY?
       JEQ  GETQ
       CI   R1,>45       NUMLOCK KEY?
       JNE  TSTCAP
       MOVB @KEYFLG+>1D,R1    no numlock toggle if CTL is pressed
       JNE  GETQ
       INV  R10          INVERT NUMLOCK FLAG
       JMP  GETQ
*
TSTCAP CI   R1,>3A       CAPS LOCK KEY?
       JNE  NOTCAP
       INV  R9           INVERT CAPLOC FLAG
       JMP  GETQ
*
* now, we have a useful scan code in R1...put it into R7, set new key status
*
NOTCAP MOVB @H20,@>837C
       MOV  R1,R7
       JMP  GETQRT
*
*
* HERE IF NO NEW KEYS, CHECK TO SEE IF LAST KEY IS *STILL* DOWN...
*
*
GETQ1  MOV  R7,R1
       JEQ  QSHIT
       MOVB @KEYFLG(R1),R0    IS THE KEY DOWN?
       JNE  GETQ1A
QSHIT  CLR  R7                IT'S NOT STILL DOWN
       SETO R8
GETQ1A MOV  R7,R1
GETQRT RT
*
********************************************************************************
*
*IF USER MODE=0 THEN MODE=LAST_MODE
*              ELSE MODE=USER_MODE
*IF MODE>5 THEN MODE=5
*
*MODE=1,2 DO JOYSTICK
*         GET KEY
*         IF KEY=LASY KEY THEN STAT=ON ELSE STAT=OFF
*         RETURN SCAN1(KEY) <VALIDATE MODE>
*
*MODE=3   DO MODE 5 SCAN
*         IF CODE>96 & CODE < 123 THEN ADD ->20
*         IF CODE>126 THEN KILL IT
*         IF CODE<32 & CODE>15 THEN KILL IT
*
*MODE=4   DO MODE 5 SCAN
*         IF 0<= (CODE&>7F) <32 THEN TOGGLE 8TH BIT
*
*MODE=5   NOTHING TO DO
*
*
* TABLE FOR MODES: 3,4,5
* 5=MOST GENERAL MODE
* 3,4 ARE BOTH FILTERED VERSIONS OF MODE 5
*
SCAN1  BYTE >FF,>9B,>31,>32     "12"
       BYTE >33,>34,>35,>36   "3456"
       BYTE >37,>38,>39,>30   "7890"
       BYTE >2D,>3D,>08,>89   "-="
*
       BYTE >71,>77,>65,>72   "qwer"
       BYTE >74,>79,>75,>69   "tyui"
       BYTE >6F,>70,>5B,>5D   "op[]"
       BYTE >0D,>F0,>61,>73     "as"  <CONTROL>
*
       BYTE >64,>66,>67,>68   "dfgh"
       BYTE >6A,>6B,>6C,>3B   "jkl;"
       BYTE >27,>60,>F1,>5C   "'` \"  <SHIFT1>
       BYTE >7A,>78,>63,>76   "zxcv"
*
       BYTE >62,>6E,>6D,>2C   "bnm,"
       BYTE >2E,>2F,>F1,>2A   "./ *"  <SHIFT2>
       BYTE >F2,>20,>F3,>03   " "     <ALT = FCTN> <CAP LOCK>
       BYTE >04,>07,>02,>0E
*
       BYTE >0C,>01,>06,>0F
       BYTE >BC,>F4,>F5,>8C           <NUMLOCK> <SCROLL LOCK>
       BYTE >0B,>0C,>2D,>08
       BYTE >FF,>09,>2B,>8A
*
       BYTE >0A,>02,>04,>03
       BYTE >FF,>FF,>FF,>E0
       BYTE >E1
*
* THIS TABLE COULD BE ELIMINATED AT THE EXPENSE OF SPEED
* SCAN TABLE WITH SHIFT ACTIVE
*
SCAN1S BYTE >FF,>9B,>21,>40     "!@"
       BYTE >23,>24,>25,>5E   "#$%^"
       BYTE >26,>2A,>28,>29   "&*()"
       BYTE >5F,>2B,>08,>94   "_+"
*
       BYTE >51,>57,>45,>52   "QWER"
       BYTE >54,>59,>55,>49   "TYUI"
       BYTE >4F,>50,>7B,>7D   "OP{}"
       BYTE >0D,>F0,>41,>53     "AS"  <CONTROL>
*
       BYTE >44,>46,>47,>48   "DFGH"
       BYTE >4A,>4B,>4C,>3A   "JKL;"
       BYTE >22,>7E,>F1,>7C   ""~ |"  <SHIFT1>
       BYTE >5A,>58,>43,>56   "ZXCV"
*
       BYTE >42,>4E,>4D,>3C   "BNM<"
       BYTE >3E,>3F,>F1,>FF   ">?"    <SHIFT2>
       BYTE >F2,>20,>F3,>03   " "     <ALT>   <CAP LOCK>
       BYTE >04,>07,>02,>0E
*
       BYTE >0C,>01,>06,>0F
       BYTE >BC,>F4,>F5,>8C           <NUMLOCK> <SCROLL LOCK>
       BYTE >0B,>0C,>2D,>08
       BYTE >FF,>09,>2B,>8A
*
       BYTE >0A,>02,>04,>03
       BYTE >FF,>FF,>FF,>E0
       BYTE >E1
*
* TABLE WITH <CONTROL>...PRETTY EASY TO DO IN PROGRAM...SPEED, SPACE
*
SCAN1C BYTE >FF,>9B,>B1,>B2     "12"
       BYTE >B3,>B4,>B5,>B6   "3456"
       BYTE >B7,>9E,>9F,>B0   "7890"
       BYTE >FF,>9D,>08,>97   "-="
*
       BYTE >91,>97,>85,>92   "qwer"
       BYTE >94,>99,>95,>89   "tyui"
       BYTE >8F,>90,>FF,>FF   "op[]"
       BYTE >0D,>F0,>81,>93     "as"  <CONTROL>
*
       BYTE >84,>86,>87,>88   "dfgh"
       BYTE >8A,>8B,>8C,>9C   "jkl;"
       BYTE >FF,>FF,>F1,>FF   "'` \"  <SHIFT1>
       BYTE >9A,>98,>83,>96   "zxcv"
*
       BYTE >82,>8E,>8D,>80   "bnm,"
       BYTE >9B,>BB,>F1,>FF   "./ *"  <SHIFT2>
       BYTE >F2,>FF,>F3,>B1   " "     <ALT = FCTN> <CAP LOCK>
       BYTE >B2,>B3,>B4,>B5
*
       BYTE >B6,>B7,>B8,>B9
       BYTE >BA,>F4,>F5,>FF           <NUMLOCK> <SCROLL LOCK>
       BYTE >0B,>0C,>2D,>88
       BYTE >FF,>09,>2B,>FF
*
       BYTE >0A,>02,>04,>03
       BYTE >FF,>FF,>FF,>E0
       BYTE >E1
*
* <FUNCTION> TABLE
*
SCAN1F BYTE >FF,>9B,>03,>04     "12"
       BYTE >07,>02,>0E,>0C   "3456"
       BYTE >01,>06,>0F,>BC   "7890"
       BYTE >FF,>05,>08,>96    "="
*
       BYTE >C5,>7E,>0B,>5B   " ~ ["
       BYTE >5D,>C6,>5F,>3F   "] _?"
       BYTE >27,>22,>5B,>5D   "'"[]"
       BYTE >0D,>F0,>7C,>08     "|"   <CONTROL>
*
       BYTE >09,>7B,>7D,>BF   " {}"
       BYTE >C0,>C1,>C2,>BD
       BYTE >27,>60,>F1,>5C   "'` \"  <SHIFT1>
       BYTE >5C,>0A,>60,>7F   "\ '"
*
       BYTE >BE,>C4,>C3,>B8
       BYTE >B9,>2F,>F1,>2A    "/ *"  <SHIFT2>
       BYTE >F2,>20,>F3,>03   " "     <ALT = FCTN> <CAP LOCK>
       BYTE >04,>07,>02,>0E
*
       BYTE >0C,>01,>06,>0F
       BYTE >BC,>F4,>F5,>FF           <NUMLOCK> <SCROLL LOCK>
       BYTE >0B,>0C,>2D,>08
       BYTE >FF,>09,>2B,>FF
*
       BYTE >0A,>02,>04,>03
       BYTE >FF,>FF,>FF,>E0
       BYTE >E1
*
HFF    BYTE >FF
H81    BYTE >81
E05    BYTE >05
H20    BYTE >20
H03    BYTE >03
H04    BYTE >04
HFC    BYTE >FC
H00    BYTE >00
H01    BYTE >01
HF8    BYTE >F8
       EVEN
H3FFF  DATA >3FFF
KMODE  DATA 0
       PAGE
ZAPKEY1 B   @ZAPKEY

*
* IS A KEYBOARD INTERRUPT, SO PUT IT IN THE BUFFER
*
KEYS2  LI   R12,KBRET2
*
KEYTST LWPI KEYINT            USE THE WORKSPACE
       CLR  R12
       TB   8
       JEQ  ZAPKEY1
       SBZ  8
*
       MOV  R4,R4             EMPTY?
       JEQ  KBEMTY            YES
       C    R2,R3             IS IT FULL?
       JEQ  KBFULL            FULL
KBEMTY SETO R4
       MOVB @>8008,R1
       CB   R1,@HD8
************************** added fix by JHW on 5.13.94

       JLE  JHWFIX
       LI   R12,>1EF0
       SBZ  1
       SBO  1
       CLR  R12
KWAITA TB   8
       JEQ  KWAITA
       JMP  KBEMTY
*************************** added fix end by JHW on 5.13.94
JHWFIX EQU  $
       MOVB R1,*R2+
       CI   R2,ENDKBF
       JNE  NOTEKB
       LI   R2,STRKBF
NOTEKB SRA  R1,8
       MOVB R1,R12
       ANDI R1,>7F
       INV  R12
       MOVB R12,@KEYSDN(R1)
       JEQ  KBFULL
*
       MOVB @KEYSDN+>1D,R12
       JEQ  KBFULL
       MOVB @KEYSDN+>2A,R12
       JEQ  KBFULL
       MOVB @KEYSDN+>38,R12
       JEQ  KBFULL
*
       MOV  @CMODE,R12
       INC  R12
       ANDI R12,>0003
       MOV  R12,@CMODE
       MOVB @REG9(R12),@>8C02
       MOVB @H89,@>8C02
*
KBFULL LI   R12,>1EF0
       SBZ  1
       SBO  1
*
       CLR  @QUITF
       MOVB @KEYSDN+>1D,R12   CTL
       JEQ  ZKEY
       MOVB @KEYSDN+>38,R12   ALT
       JEQ  ZKEY
       MOVB @KEYSDN+>53,R12   DEL
       JEQ  ZKEY
       MOV  @KMODE,@QUITF
       JNE  ZKEY
*
QWKESC
NOTNEEDED
; 2.28.2021
; NUMFIL Powerup reset
;
; The code in HDR2-P2 (PWRUP3) could be expanded for other helper code)
;
; This still isn't a perfect solution since MDOS powerup is never called
;      except during a warm restart
;
; Workspace at this point is in >A000 page, and since PWRUP3 uses R1
;      to save/restore page, we must change the WS before executing
;
       LWPI >F000        force a WS out of to-be-paged space!
       LI   R9,>0700     ;master DSR page
       MOVB R9,@>8002    ;be sure it is in place
       C    @>4012,@BEEF      special flag here?
       JNE  SKIPNM            no, this isn't MDOS 7.x or above
       MOV  @>4014,R9         yes, get vector
       BL   *R9               and execute numfil reset
;      STWP R9                test
;      MOV  R9,@>4012

SKIPNM MOVB @>8005,@>8000
       LI   R12,>1EF0         ;8.28.2021, disable wait states before return!
       SBO  7                 ;
       LI   R12,>1EF4         This appears to push page back to >0000
       SBO  0                 9640 MODE
       LWPI >F000             then start executing from that space
*                             tricky..
       MOV  @VIDMOD,R1
       CLR  R0
       XOP  @SIX,0            restore dos video mode
*
       LI   R0,>0027
       LI   R1,>F006
       CLR  R2
       LI   R3,>1A00
       XOP  @SIX,0            clear screen
*
       MOVB @H00,@>F111
       MOVB @>2429,@>F111
       MOV  @>2012,R0
       LI   R1,KEYSDN
       LI   R2,>100
MDOS00 MOVB *R1+,*R0+         restore key table
       DEC  R2
       JNE  MDOS00
*
       MOV  @>2014,R1
       MOV  @CAPFLG,@18(R1)
       MOV  @CAPFLG+2,@20(R1) restore caploc & numlock info
       CLR  R12
       SBO  8                 turn key interrupts back on

       BLWP @>0000            RE-START EXECUTE OF THE "MDOS" SYSTEM
*
BEEF   DATA >BEEF        ;pwrup3 special flag
HEX07  DATA >0700
SIX    DATA 6
RUNNER DATA >0700
GPLWS  DATA >83E0
*
ZKEY   MOVB @KEYSDN+>2A,R12   SHIFT1
       JEQ  ZAPKEY
       MOVB @KEYSDN+>36,R12   SHIFT2
       JEQ  ZAPKEY
       MOVB @KEYSDN+>1D,R12   CTL
       JEQ  ZAPKEY
*
       LWPI >83E0
       B    @TILOAD
*
ZAPKEY LWPI >82E0
       CLR  R12
       TB   1
       JEQ  ZK2
       MOV  @>400C,R11
       JEQ  ZK2
       MOV  @2(R11),R11
       JEQ  ZK2
       LI   R12,>1000
       BL   *R11
       NOP
*
ZK2    LWPI >83E0
       B    *R12
*
CMODE  DATA 0
REG9   BYTE >00,>08,>80,>88
H89    BYTE >89,0
*
       END
*
